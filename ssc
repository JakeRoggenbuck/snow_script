#!/usr/bin/env python3
import argparse
import shlex
import regex

parser = argparse.ArgumentParser()
parser.add_argument("filename", type=str)
args = parser.parse_args()

mem = []

def m(l):
    return int(c[l])
def sm(l):
    return str(mem[m(l)])
def im(l):
    return int(mem[m(l)])

with open(args.filename, 'r') as f:
    lines = []
    for line in f:
        if not regex.match(r'^\s*$', line):
            lines.extend(line.strip().split(';'))

currentLine = 0
while currentLine <= len(lines)-1:
    c = shlex.split(lines[currentLine])
    if c[0] == "input":
        mem.append(input(c[1]))
    elif c[0] == "input#":
        mem[m(1)] = input(c[2])
    elif c[0] == "int&":
        mem[m(1)] = im(1)
    elif c[0] == "str&":
        mem[m(1)] = sm(1)
    elif c[0] == "int":
        mem.append(im(1))
    elif c[0] == "str":
        mem.append(sm(1))
    elif c[0] == "calc":
        mem.append(eval(sm(1) + c[2] + sm(3)))
    elif c[0] == "calc#":
        mem[m(1)] = eval(sm(2) + c[3] + sm(4))
    elif c[0] == "val":
        mem.append(c[1])
    elif c[0] == "val#":
        mem[m(1)] = c[2]
    elif c[0] == "out":
        print(mem[m(1)])
    elif c[0] == "push":
        mem.append(sm(1) + sm(2))
    elif c[0] == "push#":
        mem[m(1)] = sm(2) + sm(3)
    elif c[0] == "dump":
        print(mem)
    elif c[0] == "dump@":
        print(mem[c[1]])
    elif c[0] == "type@":
        print(type(mem[m(1)]))
    elif c[0] == "is_str":
        mem.append(mem[m(1)] == str(c[2]))
    elif c[0] == "is_int":
        mem.append(mem[m(1)] == int(c[2]))
    elif c[0] == "is_str#":
        mem[m(1)] = mem[m(2)] == str(c[3])
    elif c[0] == "is_int#":
        mem[m(1)] = mem[m(2)] == int(c[3])
    elif c[0] == "jump":
        currentLine += int(c[1])
    elif c[0] == "if":
        if not mem[int(c[1])]:
            currentLine += int(c[2])
    currentLine += 1

